{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","src","image","onClick","shuffle","style","height","width","marginBottom","marginTop","App","state","sus","clickedScaryIds","score","goal","status","shuffleScoreCard","id","console","log","includes","setState","push","length","i","j","Math","floor","random","className","this","map","scary","div","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3BAGgB,SAASA,EAAMC,GAC3B,OACI,6BACI,yBAAKC,IAAMD,EAAME,MAAOC,QAASH,EAAMI,QAASC,MAAS,CAACC,OAAQ,IAAKC,MAAO,IAAIC,aAAc,GAAIC,UAAW,O,WCsE5GC,G,uNAlEbC,MAAQ,CACNC,MACAC,gBAAiB,GACjBC,MAAO,EACPC,KAAM,EACNC,OAAQ,I,EAIVC,iBAAmB,SAAAC,GACjBC,QAAQC,IAAI,UACZ,IAAIP,EAAkB,EAAKF,MAAME,gBAEjC,GAAGA,EAAgBQ,SAASH,GAC1B,EAAKI,SAAS,CAAET,gBAAiB,GAAIC,MAAO,EAAGE,OAAS,iCAD1D,CAME,GAFAH,EAAgBU,KAAKL,GAES,IAA3BL,EAAgBW,OAGjB,OAFA,EAAKF,SAAS,CAACR,MAAO,EAAGE,OAAQ,4BAA6BH,gBAAiB,UAC/EM,QAAQC,IAAI,iBAId,IAAK,IAAIK,EAAIb,EAAIY,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADD,EAEpB,CAACb,EAAIc,GAAId,EAAIa,IAA/Bb,EAAIa,GAFkC,KAE9Bb,EAAIc,GAF0B,KAKzC,EAAKJ,SAAS,CAAEV,MAAKC,kBAAiBC,MAAOD,EAAgBW,OAAQR,OAAQ,Q,wEAMvE,IAAD,OACP,OACE,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,uBACA,uBAAGA,UAAU,aAAb,wCASCC,KAAKpB,MAAMC,IAAIoB,KAAI,SAAAC,GAAK,OACvB,kBAAClC,EAAD,CACEmC,KAAG,EAACJ,UAAU,YAEd1B,QAAS,kBAAM,EAAKa,iBAAiBgB,EAAMf,KAC3CA,GAAIe,EAAMf,GACViB,IAAKF,EAAMf,GACXhB,MAAO+B,EAAM/B,gB,GA3DTkC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2144931.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n export default function Card (props) {\r\n    return (\r\n        <div>\r\n            <img src= {props.image} onClick={props.shuffle} style = {{height: 350, width: 350,marginBottom: 10, marginTop: 10}}></img>\r\n        </div>\r\n    )\r\n} ","import React, { Component } from \"react\";\nimport Card from \"./components/Card\"\n// import Wrapper from \"./components/Wrapper\";\n// import Score from \"./components/Score\";\nimport sus from \"./cards.json\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  // Setting this.state.scary to the cards json array\n  state = {\n    sus,\n    clickedScaryIds: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  //shuffle the scary cards in the browser\n  shuffleScoreCard = id => {\n    console.log(\"click!\");\n    let clickedScaryIds = this.state.clickedScaryIds;\n\n    if(clickedScaryIds.includes(id)){\n      this.setState({ clickedScaryIds: [], score: 0, status:  \"Who will kill you next..\" });\n      return;\n    }else{\n      clickedScaryIds.push(id)\n\n      if(clickedScaryIds.length === 8){\n        this.setState({score: 8, status: \"Saved yoself this time...\", clickedScaryIds: []});\n        console.log('Youve Escaped');\n        return;\n      }\n\n      for (let i = sus.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [sus[i], sus[j]] = [sus[j], sus[i]];\n      }\n\n      this.setState({ sus, clickedScaryIds, score: clickedScaryIds.length, status: \" \" });\n\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Are You Scared Yet?</h1>\n          <p className=\"App-intro\">\n            Don't click on the same buddy twice\n          </p>\n        </header>\n        {/* <Score total={this.state.score}\n               goal={8}\n               status={this.state.status}\n(               />\n)        <Wrapper> */}\n          {this.state.sus.map(scary => (\n            <Card\n              div className=\"Card-body\"\n\n              shuffle={() => this.shuffleScoreCard(scary.id)}\n              id={scary.id}\n              key={scary.id}\n              image={scary.image}  \n            /> \n          ))}\n        {/* </Wrapper> */}\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}